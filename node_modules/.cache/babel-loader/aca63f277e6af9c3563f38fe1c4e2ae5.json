{"ast":null,"code":"var _jsxFileName = \"/home/giangth/react-todo-1/src/App.js\";\nimport React, { Component } from 'react';\nimport { fromJS } from \"immutable\";\nimport './App.scss';\nimport Column from './Component/Column/Column';\nimport AddNewTask from './Component/AddNewTask/AddNewTask';\nimport Task from './Component/Task/Task';\nimport toastr from 'toastr';\nimport uuidv1 from 'uuid/v1';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      display: false,\n      columns: fromJS([{\n        id: 'td',\n        title: 'TO DO',\n        tasks: [{\n          id: 1,\n          content: 'Demo task',\n          time: '04/15/2019, 9:25:35 PM'\n        }]\n      }, {\n        id: 'ip',\n        title: 'IN PROGRESS',\n        tasks: []\n      }, {\n        id: 'de',\n        title: 'DONE',\n        tasks: []\n      }]),\n      selectedColumn: '',\n      taskContent: ''\n    };\n\n    this.handleChangeTaskContent = e => this.setState({\n      taskContent: e.target.value\n    });\n\n    this.handleChangeSelectedColumn = selectedColumn => () => {\n      this.setState({\n        selectedColumn: selectedColumn\n      });\n    };\n\n    this.ToggleNewTask = (idColumn = '') => () => {\n      this.setState(prevState => ({\n        selectedColumn: idColumn,\n        display: !prevState.display\n      }));\n    };\n\n    this.handleAddTask = () => {\n      // Lấy nội dung task từ state\n      const {\n        taskContent\n      } = this.state; // Kiểm tra xem nội dung có rỗng hay không trước khi lưu lại\n\n      if (taskContent.trim() === '') {\n        return toastr.warning('Please enter your task', 'Notice', {\n          timeOut: 2000\n        });\n      } // Lấy id cột mà chúng ta muốn thêm task vào từ state\n\n\n      const {\n        selectedColumn,\n        columns\n      } = this.state; // Tạo task mới với đầy đủ thông tin là id, nội dung và thời gian tạo\n\n      const newTask = fromJS({\n        id: uuidv1(),\n        content: taskContent,\n        time: new Date().toLocaleString()\n      }); // Lấy vị trí cột đó trong state\n\n      const columnIndex = columns.findIndex(column => column.get('id') === selectedColumn); // Lưu lại task đó vào cột\n\n      const updatedColumn = columns.updateIn([columnIndex, 'tasks'], tasks => tasks.push(newTask)); // Cập nhật lại state, ở đây chúng ta đồng thời sẽ reset lại các state của modal\n      // như đóng modal và clear nội dung task, cột được chọn\n\n      this.setState({\n        displayModal: false,\n        selectedColumn: '',\n        taskContent: '',\n        columns: fromJS(updatedColumn)\n      });\n    };\n  }\n\n  render() {\n    const {\n      columns,\n      display,\n      taskContent\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"App__title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, \"To Do List\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App__content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, columns.map(column => /*#__PURE__*/React.createElement(Column, {\n      key: column.get('id'),\n      column: column,\n      ToggleNewTask: this.ToggleNewTask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        minHeight: '300px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    }, column.get('tasks').map(task => /*#__PURE__*/React.createElement(Task, {\n      key: task.get('id'),\n      task: task,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 37\n      }\n    }))))), display && /*#__PURE__*/React.createElement(AddNewTask, {\n      ToggleNewTask: this.ToggleNewTask(),\n      selectedColumn: this.state.selectedColumn,\n      handleChangeSelectedColumn: this.handleChangeSelectedColumn,\n      taskContent: taskContent,\n      handleChangeTaskContent: this.handleChangeTaskContent,\n      handleAddTask: this.handleAddTask(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 30\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/giangth/react-todo-1/src/App.js"],"names":["React","Component","fromJS","Column","AddNewTask","Task","toastr","uuidv1","App","state","display","columns","id","title","tasks","content","time","selectedColumn","taskContent","handleChangeTaskContent","e","setState","target","value","handleChangeSelectedColumn","ToggleNewTask","idColumn","prevState","handleAddTask","trim","warning","timeOut","newTask","Date","toLocaleString","columnIndex","findIndex","column","get","updatedColumn","updateIn","push","displayModal","render","map","minHeight","task"],"mappings":"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","sourcesContent":["import React ,{Component} from 'react';\nimport {fromJS} from \"immutable\";\nimport './App.scss';\nimport Column from './Component/Column/Column';\nimport AddNewTask from './Component/AddNewTask/AddNewTask';\nimport Task from './Component/Task/Task';\nimport toastr from 'toastr';\nimport uuidv1 from 'uuid/v1'\n\nclass App extends Component{\n    state={\n        display:false,\n        columns:fromJS([\n            { id: 'td', title: 'TO DO', tasks: [{id: 1, content: 'Demo task', time: '04/15/2019, 9:25:35 PM'}] },\n            { id: 'ip', title: 'IN PROGRESS', tasks: [] },\n            { id: 'de', title: 'DONE', tasks: [] }\n        ]),\n        selectedColumn: '',\n        taskContent:''\n};\n    handleChangeTaskContent= (e) => this.setState({taskContent:e.target.value });\n    handleChangeSelectedColumn = (selectedColumn) => () => {\n        this.setState({ selectedColumn: selectedColumn })\n    };\n    ToggleNewTask = (idColumn='')=>() =>{\n        this.setState(prevState=>({\n            selectedColumn: idColumn,\n            display:!prevState.display,\n        }));\n    };\n    handleAddTask=()=>{\n        // Lấy nội dung task từ state\n        const { taskContent } = this.state\n\n        // Kiểm tra xem nội dung có rỗng hay không trước khi lưu lại\n        if (taskContent.trim() === '') {\n            return toastr.warning('Please enter your task', 'Notice', { timeOut: 2000 });\n        }\n\n        // Lấy id cột mà chúng ta muốn thêm task vào từ state\n        const { selectedColumn, columns } = this.state;\n\n        // Tạo task mới với đầy đủ thông tin là id, nội dung và thời gian tạo\n        const newTask = fromJS({\n            id: uuidv1(),\n            content: taskContent,\n            time: new Date().toLocaleString()\n        });\n\n        // Lấy vị trí cột đó trong state\n        const columnIndex = columns.findIndex(column => column.get('id') === selectedColumn);\n\n        // Lưu lại task đó vào cột\n        const updatedColumn = columns.updateIn(\n            [columnIndex, 'tasks'],\n            tasks => tasks.push(newTask)\n        );\n\n        // Cập nhật lại state, ở đây chúng ta đồng thời sẽ reset lại các state của modal\n        // như đóng modal và clear nội dung task, cột được chọn\n        this.setState({\n            displayModal: false,\n            selectedColumn: '',\n            taskContent: '',\n            columns: fromJS(updatedColumn)\n        })\n};\nrender(){\n    const {columns , display,taskContent} = this.state;\n\n    return(\n        <div className=\"App\">\n        <h1 className=\"App__title\">\n            To Do List\n        </h1>\n            <div className=\"App__content\">\n                {\n                    columns.map(column => (\n                        <Column key={column.get('id')} column={column} ToggleNewTask={this.ToggleNewTask}>\n                            <div style={{ minHeight: '300px' }}>\n                                {column.get('tasks').map(task =>(\n                                    <Task key={task.get('id')} task={task} />\n                                ))}\n                            </div>\n                        </Column>\n                    ))\n                }\n                {display  && <AddNewTask ToggleNewTask={this.ToggleNewTask()}\n                                         selectedColumn={this.state.selectedColumn}\n                                         handleChangeSelectedColumn={this.handleChangeSelectedColumn}\n                                         taskContent={taskContent}\n                                         handleChangeTaskContent={this.handleChangeTaskContent}\n                                         handleAddTask={this.handleAddTask()} />}\n            </div>\n        </div>\n    )\n}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}